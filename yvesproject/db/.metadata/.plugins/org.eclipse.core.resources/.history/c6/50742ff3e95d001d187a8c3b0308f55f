package com.mycompany.gestaofuncionarios.presenter;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JOptionPane;

import com.mycompany.gestaofuncionarios.DAO.FuncionarioSQLiteDAO;
import com.mycompany.gestaofuncionarios.model.Funcionario;
import com.mycompany.gestaofuncionarios.states.FuncionarioStates;
import com.mycompany.gestaofuncionarios.states.FuncionarioVisualizacaoStates;
import com.mycompany.gestaofuncionarios.view.ViewManterFuncionario;

public class ManterFuncionarioPresenter {
	private Funcionario func;
	private ViewManterFuncionario viewManterFuncionario;
	private FuncionarioStates state;

	public ManterFuncionarioPresenter(final ViewManterFuncionario viewManterFuncionario, Funcionario func) {
		this.func = func;
		this.viewManterFuncionario = viewManterFuncionario;
		this.setFuncionarioState(new FuncionarioVisualizacaoStates(this));
		this.setBotoes();
		this.setaCamposFunc();
	}

	public void setBotoes() {
		viewManterFuncionario.getBtnEditarFuncionario().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				editarFunc();
			}
		});

		viewManterFuncionario.getBtnSalvarModificacaoFuncionario().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (salvarFunc()) {
					
					JOptionPane.showMessageDialog(null, "Modificação salva com sucesso!", "Atenção",
							JOptionPane.INFORMATION_MESSAGE);
					visualizarFunc();
				} else {
					JOptionPane.showMessageDialog(null, "Erro ao atualizar dados do funcionário!", "Erro",
							JOptionPane.ERROR_MESSAGE);
				}
			}
		});

		viewManterFuncionario.getBtnFecharManterFuniconario().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				viewManterFuncionario.getFrame().setVisible(false);
			}
		});

		viewManterFuncionario.getBtnExcluirFuncionario().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (excluirFunc()) {
					JOptionPane.showMessageDialog(null, "Funcionário excluído com sucesso!", "Atenção",
							JOptionPane.INFORMATION_MESSAGE);
				} else {
					JOptionPane.showMessageDialog(null, "Erro ao excluir funcionário!", "Erro",
							JOptionPane.ERROR_MESSAGE);
				}
			}
		});
	}

	public void setFuncionarioState(FuncionarioStates funcState) {
		this.state = funcState;
	}

	private void setaCamposFunc() {
		getViewManterFuncionario().getLblNome().setText(func.getNome());
		getViewManterFuncionario().getLblCargo().setText(func.getCargo());
		getViewManterFuncionario().getLblIdade().setText(String.valueOf(func.getIdade()));
		getViewManterFuncionario().getLblAdmissao().setText(func.getAdmissao());
		getViewManterFuncionario().getLblSalario().setText(String.valueOf(func.getSalario()));
		getViewManterFuncionario().getLblDistanciaTrab().setText(String.valueOf(func.getDistTrab()));
		getViewManterFuncionario().getLblIdFunc().setText(String.valueOf(func.getFuncId()));
	}

	private boolean excluirFunc() {
		FuncionarioSQLiteDAO dao = new FuncionarioSQLiteDAO();
		return dao.excluirFuncionario(this.func.getFuncId());
	}

	public void editarFunc() {
		try {
			this.state.editar();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public boolean salvarFunc() {
		if ((getViewManterFuncionario().getTextCargo().getText() == null
				|| getViewManterFuncionario().getTextCargo().getText().trim().equals(""))
				|| (getViewManterFuncionario().getTextNome().getText() == null
						|| getViewManterFuncionario().getTextNome().getText().trim().equals(""))
				|| (getViewManterFuncionario().getTextSalario().getText() == null
						|| getViewManterFuncionario().getTextSalario().getText().trim().equals(""))
				|| (getViewManterFuncionario().getTextIdade().getText() == null
						|| getViewManterFuncionario().getTextIdade().getText().trim().equals(""))
				|| (getViewManterFuncionario().getTextDistTrab().getText() == null
						|| getViewManterFuncionario().getTextDistTrab().getText().trim().equals(""))) {
			JOptionPane.showConfirmDialog(null, "Há campos vazios!");
		} else {
			try {
				setFunc(new Funcionario());
				this.func.setNome(getViewManterFuncionario().getTextNome().getText());
				this.func.setCargo(getViewManterFuncionario().getTextCargo().getText());
				this.func.setFuncId(Integer.valueOf(getViewManterFuncionario().getLblIdFunc().getText()));
				this.func.setAdmissao(getViewManterFuncionario().getLblAdmissao().getText());
				this.func.setSalario(Double.valueOf(getViewManterFuncionario().getTextSalario().getText()));
				this.func.setIdade(Integer.valueOf(getViewManterFuncionario().getTextIdade().getText()));
				this.func.setDistTrab(Integer.valueOf(getViewManterFuncionario().getTextDistTrab().getText()));
			} catch (NumberFormatException e1) {
				e1.printStackTrace();
				JOptionPane.showConfirmDialog(null, "Digite valores válidos!");
			}
			FuncionarioSQLiteDAO dao = new FuncionarioSQLiteDAO();
			try {
				dao.alterarFuncionario(this.func);
				
			}catch (Exception e) {
				e.printStackTrace();
			}
			
			return true;
		}
		return false;
	}

	public void visualizarFunc() {
		try {
			state.salvar();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public Funcionario getFunc() {
		return func;
	}
	
	public void setFunc(Funcionario func) {
		this.func = func;
	}

	public ViewManterFuncionario getViewManterFuncionario() {
		return viewManterFuncionario;
	}
}
