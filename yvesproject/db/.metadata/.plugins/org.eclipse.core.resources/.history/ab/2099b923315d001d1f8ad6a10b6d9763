package com.mycompany.gestaofuncionarios.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.sqlite.SQLiteException;

import com.mycompany.gestaofuncionarios.model.Funcionario;

public class FuncionarioSQLiteDAO extends ConexaoFactory {

	public boolean salvar(Funcionario funcionario) {
		try {
			conectar();
			if (getConexao() == null) {

				fechar();
			}
			conectar();
			String sql = "INSERT INTO tb_funcionario (" + "nome_funcionario, " + "dist_trabalho, " + "idade, "
					+ "cargo, " + "admissao," + "salario) " + "VALUES (?, ?, ?, ?, ?, ?)";

			PreparedStatement stmt = criarStatement(sql, Statement.RETURN_GENERATED_KEYS);
			stmt.setString(1, funcionario.getNome());
			stmt.setInt(2, funcionario.getDistTrab());
			stmt.setInt(3, funcionario.getIdade());
			stmt.setString(4, funcionario.getCargo());
			stmt.setString(5, funcionario.getAdmissao());
			stmt.setDouble(6, funcionario.getSalario());
			stmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}

		fechar();
		return true;
	}

	public List<Funcionario> getListFuncDAO() throws SQLException {
		List<Funcionario> listaFunc = new ArrayList<>();
		Funcionario func = new Funcionario();

		conectar();
		ResultSet result = null;
		PreparedStatement stmt = null;
		String sql = "" + "SELECT id, " + "nome_funcionario, " + "dist_trabalho, " + "idade, " + "cargo, " + "admissao,"
				+ "salario " + "FROM tb_funcionario";

		stmt = criarStatement(sql);
		System.out.println(stmt);
		result = stmt.executeQuery();
		while (result.next()) {
			func = new Funcionario();
			func.setFuncId(result.getInt(1));
			func.setNome(result.getString(2));
			func.setDistTrab(result.getInt(3));
			func.setIdade(result.getInt(4));
			func.setCargo(result.getString(5));
			func.setAdmissao(result.getString(6));
			func.setSalario(result.getDouble(7));
			listaFunc.add(func);
		}
		fechar();
		return listaFunc;
	}

	public void ifIsCriarBd() throws SQLException {
		conectar();
		String sql = "CREATE TABLE IF NOT EXISTS tb_funcionario ("
				+ "  id               INTEGER      PRIMARY KEY AUTOINCREMENT,"
				+ "  nome_funcionario VARCHAR (20) NOT NULL," + "	 dist_trabalho    INT (5)      NOT NULL,"
				+ "	 idade            INT (2)      NOT NULL," + "	 cargo            VARCHAR (20) NOT NULL,"
				+ "	 admissao         VARCHAR (20) NOT NULL," + "	 salario          DOUBLE (10)  NOT NULL" + ");";
		PreparedStatement stmt = criarStatement(sql);
		System.out.println(stmt);
		stmt.executeUpdate();
		fechar();
	}

	public boolean excluirFuncionario(int pCodigo) {
		conectar();
		String sql = "DELETE FROM tb_funcionario WHERE id = '" + pCodigo + "'";
		PreparedStatement stmt = this.criarStatement(sql);
		try {
			stmt.executeUpdate();
			fechar();
		} catch (SQLException e) {
			e.printStackTrace();
			Logger.getLogger(FuncionarioSQLiteDAO.class.getName(), null).log(Level.SEVERE, null, e);
			return false;
		} finally {
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
					Logger.getLogger(FuncionarioSQLiteDAO.class.getName(), null).log(Level.SEVERE, null, e);
				}
			}
		}
		return true;
	}
	
	public List<Funcionario> getFuncionario(String nome) {
		conectar();
		List<Funcionario> listaFunc = new ArrayList<>();
		ResultSet result = null;
		PreparedStatement stmt = null;
		Funcionario func = new Funcionario();
		
		String sql = "SELECT id, nome_funcionario, dist_trabalho,idade,cargo,admissao,"
				+ "salario FROM tb_funcionario.nome_funcionario WHERE FREETEXT (nome_funcionario, "+ nome +")  ";
		stmt = this.criarStatement(sql);
		
		try {
			stmt.executeQuery();
			result = stmt.executeQuery();
			while(result.next()) {
				
				while (result.next()) {
					func = new Funcionario();
					func.setFuncId(result.getInt(1));
					func.setNome(result.getString(2));
					func.setDistTrab(result.getInt(3));
					func.setIdade(result.getInt(4));
					func.setCargo(result.getString(5));
					func.setAdmissao(result.getString(6));
					func.setSalario(result.getDouble(7));
					listaFunc.add(func);
				}
			}
			fechar();
		} catch (SQLException e) {
			e.printStackTrace();
			Logger.getLogger(FuncionarioSQLiteDAO.class.getName(), null).log(Level.SEVERE, null, e);
			return false;
		} finally {
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
					Logger.getLogger(FuncionarioSQLiteDAO.class.getName(), null).log(Level.SEVERE, null, e);
				}
			}
		}
		return listaFunc;
	}
}
