package com.mycompany.gestaofuncionarios.presenter;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.List;

import javax.swing.table.DefaultTableModel;

import com.mycompany.gestaofuncionarios.DAO.FuncionarioSQLiteDAO;
import com.mycompany.gestaofuncionarios.model.Funcionario;
import com.mycompany.gestaofuncionarios.view.ViewCriarFuncionario;
import com.mycompany.gestaofuncionarios.view.ViewFuncionario;
import com.mycompany.gestaofuncionarios.view.ViewManterFuncionario;

public class FuncionarioPresenter {
	private List<Funcionario> funcs;
	private Funcionario funcSelecionado;

	public FuncionarioPresenter(final ViewFuncionario viewFuncionario) throws SQLException {
		viewFuncionario.getBtnFecharFuncionarios().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				viewFuncionario.getFrame().setVisible(false);
			}
		});
		viewFuncionario.getBtnNovoFuncionario().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				EventQueue.invokeLater(new Runnable() {
					public void run() {
						try {
							ViewCriarFuncionario window = new ViewCriarFuncionario();
							window.getFrame().setVisible(true);
							new CriarFuncionarioPresenter(window);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				});
			}
		});

		viewFuncionario.getTable().addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent me) {
				
				DefaultTableModel modelo = (DefaultTableModel) viewFuncionario.getTableSelecionado().getModel();
				modelo.setNumRows(0);
				
				
				for (Funcionario funcionario : funcs) {
					if(funcionario.getFuncId() == Integer.valueOf(String.valueOf(viewFuncionario.getTable().getValueAt(viewFuncionario.getTable().getSelectedRow(), 0)))) {
						funcSelecionado = new Funcionario();
						funcSelecionado = funcionario;
						modelo.addRow(new Object[] { funcSelecionado.getFuncId(), funcSelecionado.getNome(), funcSelecionado.getIdade(),
								funcSelecionado.getCargo(), funcSelecionado.getAdmissao(), funcSelecionado.getSalario() });
					}
				} 
				
			}
		});
		
		viewFuncionario.getBtnVerFuncionario().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				EventQueue.invokeLater(new Runnable() {
					public void run() {
						try {
							if(funcSelecionado != null) {
								ViewManterFuncionario window = new ViewManterFuncionario();
								window.getFrame().setVisible(true);
								new ManterFuncionarioPresenter(window, funcSelecionado);
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				});
			}
		});

		this.carregarFuncionarios(viewFuncionario);

	}

	public void carregarFuncionarios(ViewFuncionario viewFuncionario) throws SQLException {
		funcs = new FuncionarioSQLiteDAO().getListFuncDAO();
		DefaultTableModel modelo = (DefaultTableModel) viewFuncionario.getTable().getModel();
		modelo.setNumRows(0);
		for (Funcionario funcionario : funcs) {
			modelo.addRow(new Object[] { funcionario.getFuncId(), funcionario.getNome(), funcionario.getIdade(),
					funcionario.getCargo(), funcionario.getAdmissao(), funcionario.getSalario() });
		}
	}
}
